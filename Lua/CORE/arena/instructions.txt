
Initially created for CORE but released here as a standalone resource, this library enables the creation of multiple arenas with merged collision and rotation.

Setup Instructions:
1). At the top of your wave file, run:

arenas, handle_movement = require("<folder_path>/arena/init")()

The init file will load the library and automatically replace the original Arena.

2). Include the following lines at the top of the Update function:

handle_movement()
arenas.update_all_arenas()

handle_movement(speed, ignorewalls) is what updates the red soul movement. The arguments default to 2 (normal undertale speed) and true (retain collision with the arena[s]), but can be changed if you desire.

3). Place the following line in the EndingWave function:

Arena.Remove()

-----------------------

General Usage Instructions:
You can create new arenas in the same way as sprites and projectiles using the following function:

arena = arenas(x, y, width, height, rotation)

Multiple arenas which overlap will automatically merge into a single shape. There is no option to disable this.

Arenas behave mostly like the original, with a couple notable exceptions:

1.) Arena.MoveAndResize and Arena.MoveToAndResize no longer exist. 
	1a.) This is because you can simply use Arena.Move/Arena.MoveTo and Arena.Resize one after another, and with the addition of rotation following this convention seems impractical.

2.) Arena.ResizeImmediate no longer exists. Instead, Arena.Resize takes an optional third true/false argument which tells it whether to resize immediately.


-----------------------

Additions:

Arena objects now feature Arena.Rotate(angle, immediate) and Arena.RotateTo(angle, immediate). Arena.Rotate adds or subtracts the given angle from the arena's current rotation, whereas Arena.RotateTo sets the arena's rotation directly to the input.

x, y = Arena.GetRelative(x, y) is provided for use with sprites and projectiles. It returns coordinates relative to the arena's center, for use with Sprite.MoveTo and Bullet.MoveToAbs

The sprite components of an arena can be accessed through Arena.walls (the white outside section), Arena.center (the black portion), and Arena.base (an invisible sprite used internally.) This allows you to do things such as parent things to the arena, add shaders and masks, or change the arena's color. Caution and creativity are equally advised.

( WARNING: Note that all arena sprites are stored on the layer "fake_arenas" between BelowArena and BelowPlayer. All Arena.walls sprites are placed below everything else, and all Arena.center sprites are parented to Arena.base. )

The speed an arena animates at when altered non-instantly can be adjusted by setting the Arena.movementspeed variable. The default value is 1000. This may lead to unreliable behavior at high speeds.

To get rid of an arena when you're done with it (such as at the end of a wave), use Arena.Remove(). Note that any operations on a previously removed arena will result in an error. You can see whether an arena has been removed or not using Arena.isactive

-----------------------
The Player:

The Player object should work as normal, including SetFrameBasedMovement(), Player.SetControlOverride(), Player.ismoving, and all three variations of Player.Move()

Because there will be multiple arenas active at once, Player.MoveTo now takes a fourth argument: 

Player.MoveTo(x, y, ignorewalls, arena)

Passing in an arena object will cause the player to move to the provided coordinates, relative to the arena, rotation included. This defaults to the current value of 'Arena'.


-----------------------


Finally, while arena objects are created to be mostly read-only for safety and parity reasons, it is still possible to get to the juicy read/write center using getmetatable(Arena). While this backdoor is left in for the sake of advanced use, a working knowledge of the arena code is recommended. 
